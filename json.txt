instalar postgresSql

PANDAS para cotacao bovespa
https://medium.com/@cesar.vieira/analisando-a%C3%A7%C3%B5es-da-bovespa-parte-i-500107703688
https://sigmoidal.ai/como-analisar-acoes-da-bolsa-com-python/

programa de crud pytohon
https://raccoon.ninja/pt/dev-pt/tutorial-aplicacao-em-python-sqlite-parte-02/

corte
https://www.otimizenesting.com.br/
https://www.rzcadtextil.com.br/rz-encaixe/
corte certo

python sqlite
https://www.youtube.com/watch?v=c43-mTD-8XM&list=PLesCEcYj003QiX5JaM24ytHrHiOJknwog&index=2&t=0s
https://www.devmedia.com.br/sqlite-o-pequeno-notavel/7249

python kivy
https://www.youtube.com/watch?v=E0YU3d4Vvxs&list=PLesCEcYj003QiX5JaM24ytHrHiOJknwog&index=3

python excel
https://pt.slideshare.net/ThiagoFerauche/manipulando-planilhas-excel-com-python
https://letscode-academy.com/blog/aprenda-a-integrar-python-e-excel/
http://www.python-excel.org/
https://pypi.org/project/openpyxl/
https://bastter.com/mercado/forum/864178/extra7--python--python-e-excel-pt1.aspx

python e excel
https://www.udemy.com/course/python-excel/

pandas
https://www.udemy.com/course/manipulacao-e-analise-de-dados-com-pandas-python/
data science
https://www.udemy.com/course/data-science-e-machine-learning-com-estatistica-e-python/
data science
https://www.udemy.com/course/curso-data-science-completo/
*****delphi com menu dinamico
https://www.udemy.com/course/layout-moderno-e-menu-dinamico-com-delphi-1033/
nfe acbr
https://www.udemy.com/course/layout-moderno-e-menu-dinamico-com-delphi-1033/
programa de emissao de nota
https://www.udemy.com/course/sistema-de-nota-fiscal-eletronica-40/
python
https://www.udemy.com/course/python-gratuito/
bootstrap frontend?
https://www.udemy.com/course/criar-sites-responsivos-com-bootstrap/

python completo
https://www.udemy.com/course/python-3-para-todos/


Pegue a seguinte String contendo dados JSON:

json_string = '{"first_name": "Guido", "last_name":"Rossum"}'
A mesma pode ser analisado assim:

import json
parsed_json = json.loads(json_string)
e agora pode ser usado como um dicionário normal:

print(parsed_json['first_name'])
"Guido"
----------------------------------------
Vamos lá, uma coisa de cada vez.

O módulo json tem duas funções parecidas mas diferentes: dump, que aceita o objeto a ser convertido e um arquivo, e dumps, que aceita só o objeto e retorna uma string.

Pra escrever um arquivo json, portanto, é mais interessante usar o dump:

import json

def escrever_json(lista):
    with open('meu_arquivo.json', 'w') as f:
        json.dump(lista, f)

def carregar_json(arquivo):
    with open('meu_arquivo.json', 'r') as f:
        return json.load(f)

minha_lista = ['João', 'Maria', 'José']
escrever_json(minha_lista)

print(carregar_json('meu_arquivo.json'))  # ['João', 'Maria', 'José']
Pra texto, usamos write pra escrever. Se não incluirmos o caractere de nova linha, todos os nomes serão gravados sem espaço, então temos que fazer isso:

def escrever_txt(lista):
    with open('meu_arquivo.txt', 'w', encoding='utf-8') as f:
        for nome in lista:
            f.write(nome + '\n')

def carregar_txt():
    with open('meu_arquivo.txt', 'r', encoding='utf-8') as f:
        return f.readlines()

minha_lista = ['João', 'Maria', 'José']
escrever_txt(minha_lista)

print(carregar_txt())  # ['João\n', 'Maria\n', 'José\n']
Se quisermos que os nomes venham de volta sem o caractere de linha nova, podemos modificar um pouco a função:

def carregar_txt():
    with open('meu_arquivo.txt', 'r', encoding='utf-8') as f:
        return [nome.strip() for nome in f.readlines()]
compartilharmelhorar esta respostaseguir
respondida
--------------------------------------------
import json
dados = {
    ‘nome’: ‘Renato Lelis’,
    ‘profissao’: ‘Desenvolvedor de sistemas’
}
with open(‘dados.json’, ‘w’) as json_file:
    json.dump(dados, json_file, indent=4)
-----------------------------------
import json
dados = {
    ‘nome’: ‘Renato Lelis’,
    ‘profissao’: ‘Desenvolvedor de sistemas’
}
dados_json = json.dumps(dados)
print(type(dados_json))
# <class ‘str’>
------------------------------------
load e loads
Usamos o load para fazer o oposto do dump, ou seja, deserializar o JSON em um objeto do Python.
import json
with open(‘dados.json’, ‘r’) as json_file:
    dados = json.load(json_file)
print(dados)
print(type(dados))
# {‘nome’: ‘Renato Lelis’, ‘profissao’: ‘Desenvolvedor de sistemas’}
# <class ‘dict’>
Lendo o arquivo que criamos na seção anterior, o método load só precisa de um argumento, o arquivo que contém o JSON.
E o método loads, assim como o dumps, é para lidar com JSON em formato de string. No caso do loads, transformar uma string em um objeto Python.
import json
dados = ‘{“nome”: “Renato Lelis”,”profissao”: “Desenvolvedor de sistemas”}’
dados_json = json.loads(dados)
print(type(dados_json))
# <class ‘dict’>
----------------------------------
import json               #importa o modulo que processa objetos json
json_string = '{"estado":"São Paulo", "capital":"São Paulo"}'
 
 
def main():
     
    json_decodificado  = json.loads(json_string)
     
    print json_decodificado['estado']
    print json_decodificado['capital']